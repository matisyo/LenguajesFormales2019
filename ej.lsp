;(from-dict (x dict))

(setq diccionario 
	'(
	(a (PaseoColon Independencia))
	(b (PaseoColon Chile))
	(c (PaseoColon Mexico ))
	(d (PaseoColon Venezuela))
	(e (PaseoColon Belgrano))
	(f (Independencia Balcarce))
	(g (Independencia Defensa))
	(h (Defensa Chile))
	(i (Defensa Mexico))
	(j (Defensa Venezuela))
	(k (Defensa Belgrano ))
	(l (Balcarce Chile ))
	(m (Balcarce Mexico))
	(n (Balcarce Venezuela))
	(o (Balcarce Belgrano))
	)
)
(setq grafo '(
	(a(b f)) 
	(b(a c ))
	(c(b d ))
	(d(c n e)) 
	(e(d)) 
	(f(g ))
	(g(h)) 
	(h(i l)) 
	(i(m j)) 
	(j( k)) 
	(k(o))
	(l (b f)) 
	(m (l c)) 
	(n ( j m)) 
	(o(e n))
	))

;(print (from-dict (1)))
(defun clean (lista)
	(reduce 
	 	(lambda (x1 x2) 
	 		(if (eq nil x2) x1 (cons x2 x1)))
	 	(append '(nil) lista) ))

(defun get-node (x x2)
	(equal x (nth 1 x2))
	)
(defun get-childs (x x2)
	(equal x (nth 0 x2))
	)

(defun get-dict (condition x dict)
	(first (reduce 
	 	(lambda (x1 x2)
	 		(if  (funcall condition x x2) (cons x2 x1) x1 ))
	 	(append '(nil) dict) )
	))

;(print (clean '(1 nil nil nil nil 1 nil nil 2 nil 3 4 nil 2 3 4 ) ))

;(print (get-dict 'get-node '(PaseoColon Independencia) diccionario ))
;(print (get-dict 'get-childs 'a diccionario ))

(defun delete-cond (condition x lista)
	(reduce 
	 	(lambda (lista-acum itero)
	 	
	 		(if  (funcall condition x itero) 
	 			(cons itero lista-acum) 
	 			lista-acum ))
	 	(append '(nil) lista) )
	)

(defun isout (x x2)
	(not (reduce (lambda (a b) (or a b))
	(mapcar (lambda (tmp) (eq tmp x2)) x )
	))	
	)
(print (delete-cond 'isout '(2 4) '(2 5) ))
(print (isout '(1 2 3) 2)  )
(print (equal () nil ))
(print (equal '(1) nil  ))